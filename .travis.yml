########-SBOM generate for Python-########################################################
# os: linux
# dist: bionic
# language: python
# services:
#   - docker
# jobs:
#   include:
#     - name: "Generate SBOM"
#       os: linux
#       dist: focal
#       addons:
#         sbom:
#           on:
#             branch: main
#           run_phase: after_success
#           output_format: cyclonedx-json
#           input_dir: '/python'
#           output_dir: '/sbom/python'
#       script:
#         - echo "Generating SBOM"
#         - sudo mkdir -p /sbom/python # Ensure the output directory exists
#         - cd python
#         - python hello_world.py
#         - pip install -r requirements.txt
# before_install:
#   - rvm use $(travis_internal_ruby) --fuzzy do ruby -S gem uninstall -aIx dpl
#   - rvm use $(travis_internal_ruby) --fuzzy do ruby -S gem install dpl -v 2.0.3.beta.4
# after_success:
#   - echo done
#   - echo $TRAVIS_TEST_RESULT
#   - ls /sbom/python
# after_failure:
#   - echo failed
#   - echo $TRAVIS_TEST_RESULT
#   - ls /sbom/python
#
########-SBOM generate for JavaScript-########################################################
# os: linux
# dist: focal
# language: node_js

# node_js:
#   - "14"

# jobs:
#   include:
#     - name: "test" # existing functionality
#       script:
#         - npm -v
    
#     - name: "sbom" # SBOM generation job
#       script:
#         - cd node
#         - npm install
#       addons:
#         sbom:
#           on:
#             branch: 'main'
#             pr: true
#           condition: true
#           run_phase: "after_success" # Run SBOM generation after a failure
#           output_format: "spdx-json" # Specify the SBOM output format
#           output_dir: "/test" # Specify the output directory for SBOM
#           input_dir: "/node" # Specify the input directory for SBOM

# after_success:
#   - echo done
#   - echo $TRAVIS_TEST_RESULT
#   - ls /node

# after_failure:
#   - echo failed
#   - echo $TRAVIS_TEST_RESULT
#   - ls /node

########-SBOM Docker image - Python-########################################################
# os: linux
# dist: focal
# language: python

# jobs:
#   include:
#     - name: "test" # existing functionality
#       script: # existing functionality
#         - python --version
#     - name: "sbom"
#       script:
#         - cd python
#         - pip install -r requirements.txt
#       addons:
#         sbom:
#           on:
#             branch: main
#             pr: true
#           condition: false
#           run_phase: after_success
#           output_format: spdx-json
#           input_dir: '/python'
#           output_dir: '/test'

# after_success:
#   - echo done
#   - echo $TRAVIS_TEST_RESULT
#   - ls /test
# after_failure:
#   - echo failed
#   - echo $TRAVIS_TEST_RESULT
#   - ls /test


########-SBOM Docker image - Ruby-########################################################
# os: linux
# dist: focal
# language: ruby

# jobs:
#   include:
#     - name: "test" # existing functionality
#       script: # existing functionality
#         - ruby --version
#     - name: "sbom"
#       script:
#         - cd ruby
#         - bundle install
#       addons:
#         sbom:
#           on:
#             branch: main
#             pr: true
#           condition: false
#           run_phase: after_success
#           output_format: spdx-json
#           input_dir: '/ruby'
#           output_dir: '/test'

# after_success:
#   - echo done
#   - echo $TRAVIS_TEST_RESULT
#   - ls /test
# after_failure:
#   - echo failed
#   - echo $TRAVIS_TEST_RESULT
#   - ls /test

########-SBOM Docker image - JavaScript-########################################################
os: linux
dist: focal
language: node_js

node_js:
  - 14

jobs:
  include:
    - name: "test" # existing functionality
      script:
        - npm -v
    
    - name: "sbom" # SBOM generation job
      script:
        - cd node
        - npm install
      addons:
        sbom:
          on:
            branch: main
            pr: true
          condition: true
          run_phase: after_success # Run SBOM generation after a failure
          output_format: spdx-json # Specify the SBOM output format
          output_dir: '/test' # Specify the output directory for SBOM
          input_dir: '/node' # Specify the input directory for SBOM

after_success:
  - cd test
  - ls
